name: Create Pull Request to MusicBrainz Picard Plugins

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.2.1)'
        required: true
        type: string
      release_notes:
        description: 'Release notes/description'
        required: false
        type: string
  release:
    types: [published]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: picard-plugin-shelves

      - name: Ensure release tag checked out (when triggered by release)
        if: github.event_name == 'release'
        run: |
          cd picard-plugin-shelves
          git fetch --tags
          git checkout "refs/tags/${{ github.event.release.tag_name }}"

      - name: Validate PICARD_PLUGINS_PAT
        run: |
          if [ -z "${{ secrets.PICARD_PLUGINS_PAT }}" ]; then
            echo "Error: PICARD_PLUGINS_PAT secret is not set. Add it in repository settings."
            exit 1
          fi

      - name: Set up Git configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Clone my fork of picard-plugins (authenticated)
        env:
          GH_TOKEN: ${{ secrets.PICARD_PLUGINS_PAT }}
        run: |
          git clone --branch 2.0 --single-branch \
            "https://x-access-token:${GH_TOKEN}@github.com/nrth3rnlb/picard-plugins.git" \
            picard-plugins
          cd picard-plugins
          echo "Cloned picard-plugins repository at commit:"
          git log -1 --oneline

      - name: Fetch and sync with upstream
        run: |
          cd picard-plugins
          echo "Fetching latest changes from upstream..."
          git remote add upstream https://github.com/metabrainz/picard-plugins.git || true
          git fetch upstream refs/heads/2.0:refs/remotes/upstream/2.0

          echo "Current HEAD:"
          git log -1 --oneline

          echo "Latest commit on upstream/2.0:"
          git log -1 --oneline upstream/2.0

          BEHIND=$(git rev-list --count HEAD..upstream/2.0)
          echo "Commits behind upstream: $BEHIND"

          if [ "$BEHIND" -gt 0 ]; then
            echo "Repository is behind upstream. Merging upstream/2.0..."
            git merge --no-edit upstream/2.0 || git rebase upstream/2.0
            echo "Successfully synchronized with upstream"
          else
            echo "Repository is already up-to-date with upstream"
          fi

          echo "Current state after sync:"
          git log -1 --oneline

      - name: Create feature branch
        run: |
          cd picard-plugins
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG_NAME="${{ github.event.release.tag_name }}"
            BRANCH_NAME="update-shelves-plugin-${TAG_NAME//[^a-zA-Z0-9._-]/_}"
          else
            BRANCH_NAME="update-shelves-plugin-$(date +%Y%m%d-%H%M%S)"
          fi
          
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Created branch: $BRANCH_NAME"

      - name: Copy shelves plugin
        run: |
          cd picard-plugins
          if [ -d "plugins/shelves" ]; then
            echo "Removing existing shelves plugin..."
            rm -rf plugins/shelves
          fi
          echo "Copying shelves plugin from source repository..."
          cp -r ../picard-plugin-shelves/shelves plugins/shelves
          echo "Contents of plugins/shelves:"
          ls -la plugins/shelves/

      - name: Commit changes
        run: |
          cd picard-plugins
          git add plugins/shelves
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            git commit -m "Update shelves plugin" \
              -m "Updated shelves plugin from nrth3rnlb/picard-plugin-shelves" \
              -m "This automated update ensures the plugin is synchronized with the latest changes."
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
            echo "Changes committed successfully"
          fi

      - name: Push changes and create pull request
        if: env.HAS_CHANGES == 'true'
        env:
          GH_TOKEN: ${{ secrets.PICARD_PLUGINS_PAT }}
        run: |
          if [ -z "${GH_TOKEN}" ]; then
            echo "Error: GH_TOKEN is empty. Ensure secrets.PICARD_PLUGINS_PAT is set."
            exit 1
          fi

          cd picard-plugins

          echo "Pushing branch to remote repository (nrth3rnlb/picard-plugins) (private token used)..."

          # Configure origin to use token (token not printed)
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/nrth3rnlb/picard-plugins.git"

          # Push the branch to your fork and set upstream
          git push origin "$BRANCH_NAME" --set-upstream

          # --- Build PR body: prefer release event data, fall back to manual inputs ---
          # If this run was triggered by a release, compute the changelog between the previous tag and the release tag.
          if [ "${{ github.event_name }}" = "release" ]; then
            RELEASE_NAME="${{ github.event.release.name }}"
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            RELEASE_BODY="${{ github.event.release.body }}"
            cd ../picard-plugin-shelves
            git fetch --tags
            PREV_TAG=$(git tag --sort=-creatordate | grep -v "${RELEASE_TAG}" | head -n1 || true)
            if [ -n "$PREV_TAG" ]; then
              CHANGELOG=$(git log --oneline "$PREV_TAG".."${RELEASE_TAG}" || echo "(no commits found)")
            else
              CHANGELOG=$(git log --oneline -n 50 || echo "(no commits found)")
            fi
            cd ../picard-plugins
          else
            # manual dispatch: use provided inputs
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
            RELEASE_BODY="${{ github.event.inputs.release_notes }}"
            RELEASE_NAME="${RELEASE_TAG}"
            PREV_TAG=""
            CHANGELOG="(manual run - no changelog computed)"
          fi

          PR_BODY=$(cat <<EOF
          Release: ${RELEASE_NAME} (${RELEASE_TAG})
          
          ${RELEASE_BODY}
          
          Changes since last release (${PREV_TAG:-initial}):
          ${CHANGELOG}
          
          This is an automated pull request generated by GitHub Actions.
          EOF
          )

          gh pr create \
            --repo metabrainz/picard-plugins \
            --base 2.0 \
            --head "nrth3rnlb:$BRANCH_NAME" \
            --title "Update shelves plugin — ${RELEASE_TAG}" \
            --body "$PR_BODY"

      - name: Summary
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$HAS_CHANGES" == "true" ]; then
            echo "✅ Pull request created successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Branch: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
            echo "- Target: metabrainz/picard-plugins (2.0 branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes detected - pull request not created" >> $GITHUB_STEP_SUMMARY
          fi